// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.MechanicalMayham.commands;

import org.usfirst.frc3244.MechanicalMayham.Robot;
import org.usfirst.frc3244.MechanicalMayham.RobotMap;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Drive_Turn_To_Headding_InTeleop extends PIDCommand {

	private static final double kP = 0.02;
	private static final double kI = 0.0;
	private static final double kD = 0.02;
	
    private boolean rotateToAngle;
	private double rotateToAngleRate;
	static final double kToleranceDegrees = 2.0f;
	
	private double m_x;
    private double m_y;
    private double m_currentRotationRate;
    Timer m_timer = new Timer();
	
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Drive_Turn_To_Headding_InTeleop() {
   
        super("turnController", kP, kI, kD, 0.02);
        getPIDController().setInputRange(-180.0f,  180.0f);
        getPIDController().setOutputRange(-0.65, 0.65);
        getPIDController().setAbsoluteTolerance(kToleranceDegrees);
        getPIDController().setContinuous(true);
 
        requires(Robot.drive);

  
    }

    protected double returnPIDInput() {
         
    	return Robot.drive.getHeading();
        //return RobotMap.ahrs.getAngle();
      
    }

    protected void usePIDOutput(double output) {
      
    	rotateToAngleRate = output;
        
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	rotateToAngle = false;
    	Robot.drive.zeroDistanceTraveled();
    	m_timer.reset();
    	m_timer.start();    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	
    	//if ( Robot.oi.xBox_Driver.getRawButton(6)) {
    	//	RobotMap.ahrs.reset();
        //}
    	if ( Robot.oi.xBox_Driver.getPOV()				==	0) {
    		getPIDController().setSetpoint(0.0f);
            rotateToAngle = true;
    	}  else if ( Robot.oi.xBox_Driver.getPOV()		==	45) {
           	getPIDController().setSetpoint(45.0f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xBox_Driver.getPOV()		==	90) {
        	getPIDController().setSetpoint(90.0f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xBox_Driver.getPOV()		==	135) {
        	getPIDController().setSetpoint(135.0f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xBox_Driver.getPOV()		==	180) {
        	getPIDController().setSetpoint(179.9f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xBox_Driver.getPOV()		==	225) {
            getPIDController().setSetpoint(-135.0f);
            rotateToAngle = true;
        }  else if ( Robot.oi.xBox_Driver.getPOV()		==	270) {
            getPIDController().setSetpoint(-90.0f);
            rotateToAngle = true;
        } else if ( Robot.oi.xBox_Driver.getPOV()		==	315) {
        	getPIDController().setSetpoint(-45.0f);
            rotateToAngle = true;
        }else{
        	rotateToAngle = false;
        }
        
        if ( rotateToAngle ) {
        	getPIDController().enable();
            m_currentRotationRate = rotateToAngleRate;
        } else {
        	getPIDController().disable();
            
        	m_currentRotationRate = Robot.oi.driveRotation();
            
        }
        
        m_x = Robot.oi.driveX();
    	m_y = Robot.oi.driveX();
    	
        Robot.drive.mecanumDriveAutoInTeleop(m_x, m_y, m_currentRotationRate);
  
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	getPIDController().disable();
    	// note:  it is important to call mecanumDriveCartesian here, rather than mecanumDriveAutonomous,
    	// to ensure that "heading preservation" isn't activated for the last instruction
    	Robot.drive.mecanumDriveAutoInTeleopFinished();
    	Robot.drive.mecanumDriveCartesian(0.0, 0.0, 0.0);
    	SmartDashboard.putNumber("Time", m_timer.get());
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
